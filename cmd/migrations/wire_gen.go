// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fmt"
	"github.com/google/wire"
	"meul/inventory/internal/infrastructures/drivers/postgres"
	"meul/inventory/internal/infrastructures/drivers/postgres/migrations"
	"meul/inventory/internal/interfaces/migrations_resource_cli"
	"os"
)

// Injectors from wire.go:

func InitializeMigrationHandler() (*migrations_resource_cli.MigrationCLI, error) {
	dbConfig, err := ProvideConfig()
	if err != nil {
		return nil, err
	}
	file, err := ProvideLogFile()
	if err != nil {
		return nil, err
	}
	db, err := infrastructures_drivers_postgres.NewDatabaseConnectionWithMigrationLogger(dbConfig, file)
	if err != nil {
		return nil, err
	}
	migrationConfig := _wireMigrationConfigValue
	migrationFilesOrderHandler := migrations.DefaultMigrationFilesOrderHandler()
	migrationFilesHandler := migrations.DefaultMigrationFilesHandler(migrationFilesOrderHandler)
	migrationHandler := migrations.DefaultMigrationHandler(dbConfig, db, migrationConfig, migrationFilesHandler)
	migrationCLI := migrations_resource_cli.DefaultMigrationCLI(migrationHandler)
	return migrationCLI, nil
}

var (
	_wireMigrationConfigValue = &migrations_resource_cli.MigrationConfig
)

// wire.go:

var (
	buildMode    string
	port         string = ":3000"
	trustedProxy        = []string{"127.0.0.1", "::1"}
	dbHost       string
	dbUser       string
	dbPassword   string
	dbName       string
	dbPort       string
	dbSSLMode    string
	dbTimeZone   string = "America/Toronto"
)

// ProvideConfig creates a new gorm.DB instance for PostgreSQL
func ProvideConfig() (infrastructures_drivers_postgres.DbConfig, error) {
	dsn := fmt.Sprintf(
		"host=%s user=%s password=%s dbname=%s port=%s sslmode=%s TimeZone=%s",
		dbHost, dbUser, dbPassword, dbName, dbPort, dbSSLMode, dbTimeZone,
	)
	dbConfig := infrastructures_drivers_postgres.DbConfig{
		DSN: dsn,
	}

	return dbConfig, nil
}

func ProvideLogFile() (*os.File, error) {
	logFile, err := os.OpenFile("../internal/infrastructures/drivers/postgres/migrations/log/migration.log", os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0666)
	if err != nil {
		return nil, err
	}
	return logFile, nil
}

// WireSet is a set that includes all necessary providers
var WireSet = wire.NewSet(

	ProvideConfig,
	ProvideLogFile, infrastructures_drivers_postgres.NewDatabaseConnectionWithMigrationLogger, migrations_resource_cli.DefaultMigrationCLI, migrations.DefaultMigrationFilesOrderHandler, migrations.DefaultMigrationFilesHandler, migrations.DefaultMigrationHandler, wire.Value(&migrations_resource_cli.MigrationConfig),
)
